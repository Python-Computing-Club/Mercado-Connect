export async function generateQuote(payload) {
  if (!payload || typeof payload !== "object") {
    console.warn("‚ö†Ô∏è Payload inv√°lido ou ausente:", payload);
    return null;
  }

  const baseURL = process.env.REACT_APP_UBER_QUOTE || ""; // ‚Üê use vari√°vel espec√≠fica para o servi√ßo

  if (!baseURL) {
    console.error("‚ùå REACT_APP_UBER_QUOTE n√£o definida no .env.local");
    return null;
  }

  try {
    const res = await fetch(`${baseURL}/api/uber-quote`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });

    const data = await res.json();
    console.log("üì¨ Resposta da Uber Quote Service:", data);

    if (res.ok && data.id && data.fee) {
      return {
        quoteId: data.id,
        fee: data.fee,
        eta: data.dropoff_eta,
        storeId: data.external_store_id
      };
    } else {
      console.warn("‚ö†Ô∏è Cota√ß√£o Uber inv√°lida ou incompleta:", data);
      return null;
    }
  } catch (err) {
    console.error("‚ùå Erro ao gerar cota√ß√£o Uber:", err);
    return null;
  }
}